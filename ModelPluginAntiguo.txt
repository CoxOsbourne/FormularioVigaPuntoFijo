using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using Tekla.Structures;
using Tekla.Structures.Catalogs;
using Tekla.Structures.Datatype;
using Tekla.Structures.Dialog;
using Tekla.Structures.Geometry3d;
using Tekla.Structures.Model;
using Tekla.Structures.Model.UI;
using Tekla.Structures.Plugins;
using static Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions;
using TSG = Tekla.Structures.Geometry3d;
using TSM = Tekla.Structures.Model;

namespace FormularioVigaPuntoFijo

{
    public class PluginData
    {
        #region Fields
        //
        // Define the fields specified on the Form.
        //
        [StructuresField("Length")]
        public double Length;

        [StructuresField("Profile")]
        public string Profile;

        [StructuresField("Material")]
        public string Material;
        #endregion
    }

    [Plugin("FormularioVigaPuntoFijo")]
    [PluginUserInterface("FormularioVigaPuntoFijo.MainForm")]
    public class FormularioVigaPuntoFijo : PluginBase
    {
        #region Fields
        //private Model _Model;
        private static readonly Model Model = new Model(); // Reutilizable y estable
        private PluginData _Data;
        //
        // Define variables for the field values.
        //
        private double _Length;
        private string _Profile;
        private string _Material;
        #endregion

        #region Properties
        /*private Model Model
        {
            get { return this._Model; }
            set { this._Model = value; }
        }*/

        private PluginData Data
        {
            get { return this._Data; }
            set { this._Data = value; }
        }
        #endregion

        #region Constructor
        public FormularioVigaPuntoFijo(PluginData data)
        {
            //Model = new Model();
            Data = data;
        }
        #endregion

        #region Overrides
        private static readonly Point FixedPoint = new Point(0, 0, 0);
        private static readonly InputDefinition FixedInput =
            new InputDefinition(FixedPoint);
        public override List<InputDefinition> DefineInput()
        {
            /*<InputDefinition> PointList = new List<InputDefinition>();
            TSG.Point point = new TSG.Point(0,0,0);
            PointList.Add(new InputDefinition(point));
            return PointList;*/
            //return new List<InputDefinition>(); // Lista vac√≠a
            //var fixedPoint = new Tekla.Structures.Geometry3d.Point(0, 0, 0);

            return new List<InputDefinition> { FixedInput };

            /*return new List<InputDefinition>
            {
                new InputDefinition(fixedPoint)
            };*/
            /*var fixPoint = new Tekla.Structures.Geometry3d.Point(0, 0, 0);
            return new List<InputDefinition>
            {
                new InputDefinition(fixPoint)
            };*/
        }

        public override bool Run(List<InputDefinition> Input)
        {
            try
            {
                GetValuesFromDialog();
                if(Model.GetConnectionStatus())
                {
                    Point StartPoint = new Point(0, 0, 0);
                    Point EndPoint = new Point(StartPoint.X + _Length, StartPoint.Y, StartPoint.Z);
                    CreateBeam(StartPoint, EndPoint, _Profile, _Material);
                    Model.CommitChanges();
                }
                /*Point StartPoint = new Point(0, 0, 0);
                Point EndPoint = new Point(StartPoint.X + _Length, StartPoint.Y, StartPoint.Z);
                CreateBeam(StartPoint, EndPoint, _Profile, _Material);*/
            }
            catch (Exception Exc)
            {
                MessageBox.Show(Exc.ToString());
            }

            return true;
        }
        #endregion

        #region Private methods
        /// <summary>
        /// Gets the values from the dialog and sets the default values if needed
        /// </summary>
        private void GetValuesFromDialog()
        {
            _Length = Data.Length;
            _Profile = Data.Profile;
            _Material = Data.Material;

            if(IsDefaultValue(_Length) || _Length<=0)
            {
                _Length = 2800;
            }
            if (IsDefaultValue(_Profile))
            {
                _Profile = "HEA200";
            }
            if (IsDefaultValue(_Material))
            {
                _Material = "S235JR";
            }
        }

        // Write your private methods here.
        private void CreateBeam(Point Point1, Point Point2, /*double length,*/ string profile, string material)
        {
            //string beamProfile=textBoxProfile.Text;
            TSM.Beam MyBeam = new TSM.Beam(Point1, Point2);

            MyBeam.Profile.ProfileString = profile;
            MyBeam.Material.MaterialString = material;
            MyBeam.Finish = "PAINT";
            MyBeam.StartPoint.X = /*PositionX*/Point1.X;
            MyBeam.StartPoint.Y = /*PositionY*/Point1.Y;
            MyBeam.StartPoint.Z = /*0*/Point1.Z;
            MyBeam.EndPoint.X = Point2.X/*PositionX + LengthX*/;
            MyBeam.EndPoint.Y = Point2.Y/*PositionY*/;
            MyBeam.EndPoint.Z = /*0.0*/Point2.Z;
            MyBeam.Position.Rotation = TSM.Position.RotationEnum.TOP;
            MyBeam.Position.Plane = TSM.Position.PlaneEnum.MIDDLE;
            MyBeam.Position.Depth = TSM.Position.DepthEnum.FRONT;
            if (!MyBeam.Insert())
            {
                Console.WriteLine("Insertion of beam failed.");
            }
        }
        #endregion
    }
}
